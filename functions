### Localstack || Kinesis | Lambda | SNS | DynamoDB ###

function reload_executer() {
	read -p "Please provide a 10 digit phone number to use on local:" phone
	read -p "Please provide a valid email to use on local:" email

	delete_lambda "$1Executer"
	package_lambda "$1Executer"
	create_lambda "$1Executer" $2,LOCAL_PHONE=$phone,LOCAL_EMAIL=$email
	subscribe_to_sns_topic "$1Executer" local-events
}

function reload_validator() {
	delete_lambda "$1Validator"
	package_lambda "$1Validator"
	create_lambda "$1Validator" $2
	toggle_stream $1
	create_ddb_stream_to_lambda_mapping $1
}

function delete_lambda() {
	awslocal lambda delete-function --function-name=$1
}

function package_lambda() {
	npm run copyLib && npm i && zip -r $1.zip .
}

function create_lambda() {
	awslocal lambda create-function --function-name=$1 --runtime=nodejs8.10 --role=arn:aws:iam:local --handler=index.lambda_handler --zip-file=fileb://$1.zip --environment Variables="{NODE_ENV=development,AUTH0_AES=gatsby$2}"
}

function toggle_stream() {
	disable_stream $1
	enable_stream $1
}

function disable_stream() {
	awslocal dynamodb update-table --table-name development.$1 --stream-specification '{ "StreamEnabled": false }'
}

function enable_stream() {
	 awslocal dynamodb update-table --table-name development.$1 --stream-specification '{ "StreamEnabled": true, "StreamViewType": "NEW_AND_OLD_IMAGES" }'
}

function create_ddb_stream_to_lambda_mapping() {
	awslocal lambda create-event-source-mapping --function-name "$1Validator" --event-source $(create_ddb_stream_arn $1)	--batch-size 100 --starting-position TRIM_HORIZON
}

function create_ddb_stream_arn() {
	echo "$(create_kinesis_stream_arn_prefix):stream/__ddb_stream_development.$1"
}

function create_kinesis_stream_arn_prefix() {
	echo arn:aws:kinesis:us-west-2:000000000000
}

function subscribe_to_sns_topic() {
	awslocal sns subscribe --topic-arn "$(create_sns_topic_arn_prefix)local-events" --protocol lambda --notification-endpoint "$(create_lambda_arn_prefix)$1"
}

function create_sns_topic_arn_prefix() {
	echo arn:aws:sns:us-east-1:123456789012:
}

function create_lambda_arn_prefix() {
	echo arn:aws:lambda:us-east-1:000000000000:function:
}

function unsubscribe_from_sns() {
	awslocal sns unsubscribe --subscription-arn $1
}

function list_subscriptions() {
	awslocal sns list-subscriptions	
}

function items_in_table(){
	awslocal dynamodb describe-table --table-name "development.$1" | grep ItemCount | sed 's/[^0-9]*//g'
}

function create_sns_topic(){
	awslocal sns create-topic --name $1
}

export -f items_in_table 